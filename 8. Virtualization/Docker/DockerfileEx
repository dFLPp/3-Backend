FROM debian

RUN apt update  && apt upgrade -y && apt install -y build-essential checkinstall libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev openssl libffi-dev python3-dev python3-setuptools wget bash sudo bzip2 ca-certificates byobu curl git-core htop pkg-config unzip tar


RUN wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz && tar -xvf Python-3.10.0.tgz && cd Python-3.10.0 && sudo ./configure --enable-optimizations && sudo make -j 2 && sudo make altinstall

RUN python3.10 -m pip install --upgrade pip && python3.10 -m pip install jupyter numpy scipy matplotlib pandas
RUN apt update && apt install -y procps
#porta onde meu container e pc vão se conectar
EXPOSE 8888

RUN mkdir workDir
ENV HOME=/workDir
ENV SHELL=/bin/bash
WORKDIR /workDir

CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--allow-root", "--no-browser"]


# comandos
# sudo docker build -t deb/jupyter:1.0 - < path/to/Dockerfile #(só uma vez, para criar a imagem)
# sudo docker container run -d --rm -p 8888:8888 deb/jupyter:1.0 #liga o container com tais caracteristicas
# sudo docker container logs <container id> #pegue o link e acesse o jupyter
# sudo docker exec -it <container id> /bin/bash #abre o shell do container, onde você pode fazer tudo

# Obs
# o FROM debian significa que você está criando essa imagem apartir de uma ja existente, chamada debian
# so use 1 CMD por dockerfile, serve para executar algo depois que a imagem fica pronta
# eu não fiz aqui, mas uma feature importante é a de compartilhar espaços com os "volumes", procure sobre
